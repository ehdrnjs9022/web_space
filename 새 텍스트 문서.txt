QueryString = K 값 : V 값  ( GET 방식) 가공해서 넘기기 귀찮으니
getParameter 사용
동적인응답 : Servlet(컨트롤러)
- class extends Https savlet -> 컨트롤러 패키지생성 -> new servlet 생성

request.getAttribute(" K 값");

form은 input 요소에 사용자에게 값을 받을때

절대경로 = 정확한 주소 / 상대경로 = 현재 위치 기준 방향
- 절대경로 : /bm/sc
- 상대경로 : sc

request.setAttribute("bestSeller", new Hamburger(...)); 이렇게 바로 쓰든
결과는 동일해! bestSeller라는 이름으로 DTO 객체가 저장되는 거야.

"Controller는 일 시키는 역할, Service는 실제 일 처리하는 역할"
 Service는 중간다리 역할이기도 하고, DB 말고 다른 로직
(계산, 조건, 유효성 검사 등)도 여기서 처리해.

클라이언트 → HTTP 요청 → 톰캣 서버(매핑정보가같은서블릿에연결) 
→ 서블릿 (내가 작성한 자바 코드 실행)
→ DB 처리 → JSP 응답 페이지 생성 
→톰캣이 HTTP 응답 → 클라이언트에게 전달

- Session (톰캣기능-HttpSession)
-서버가 만들어주는 객체(저장공간)
request.getSession() 이라는 코드는?
👉 서버(톰캣)에게 말하는 거예요:
"이 사용자(클라이언트)의 세션(객체 값) 있으면 가져와줘~"
"없으면 새로(객체) 만들어줘~"

결론
✔ 세션은 톰캣이 관리하니까 getSession()만 호출하면 되고,
✔ DTO는 우리가 직접 new로 만들어서 세션에 넣어주는 거예요.

RequestDispatcher (서블릿에서)로 jsp 와 연결할 객체를 생성
-> forward로  객체와 jsp 를 연결!
-> 연결하면 jsp 코드를 서블릿이 읽어냄

- 서블릿으로 값이 왔을때

1. 조회 실패 시 
- "조회 결과 실패 알림"
2. 조회 성공 시(인증성공 상태 로그인)
- RequsetDispacth 는 담아서 보내면 값이 사라짐 ( 1회만 유지 일회용 ,사용불가)

- Session  setAttribute 으로 저장해야함  ( 브라우저 세션동안 유지,사용)
(브라우저 끄거나,서버끌경우)

서블릿이 jsp에게 응답시키려고 하는게 forward 
인스턴스: heap 메모리에 올라간 객체

git pull 오류  <welcome-file>index.jsp</welcome-file> web.xml에추가

Full Class Name : 패키지부터 클래스 식별자까지
( com.kh.mfw.member.model.dto.MEMBER_DTO )

response.sendRedirect 답장할게.브라우저야 다른페이지로가!
request.getContextPath(index.sjp)	요청할게 어디냐면 index.sjp
삼항연산자(조건 ? 값1 : 값2 )
조건 ? 참일 때 값 : 거짓일 때 값;

- request : 클라이언트(사용자)의 요청 값을 꺼내받음

1. getParameter : 사용자가 form에 입력한 값 가져오기
2. getSession    : 세션 객체 얻기 (값 오래 저장할 때) /
			세션은 "보내는 기능"을 별도로 하는 건 아니고,
			JSP에서 값을 꺼내서 쓸 수 있기 때문에 결과적으로 
			'전달'처럼 보이는 거예요.	
			
3. setAttribute  :  값을 rquest에 담아서 JSP로 보내는 역할 (K ,V) ( 보내는건아님)
			보내는건 Dispatch foward
4. getContextPath : 
	- request.getContextPath() → 주소를 구하는 애
	response.sendRedirect() → 그 주소로 이동시키는 애

- response 서버가 클라이언트에게 응답 (답장)

1. sendRedirect : 브라우저에게 다른 주소로 다시 요청하라고 짓 ( 다른 페이지로 다시가!)
2. setContentType : 응답(답장)하는 문서 타입을 알려줌 (HTML, JSON, XML 등)
 				( 이 응답은 HTML 문서야~” 하고 브라우저에게 알려주는 것 )

1.HttpSession session = request.getSession();
session.setAttribute("result", result);
2,request.getSession().setAttribute("result", result);
현재 사용자 세션을 꺼내거나 새로 만듦 (1,2동일)



✅ GET 방식
주소창에 데이터가 보임 (쿼리스트링으로 전송)
http://example.com/search?name=홍길동&age=20
가볍고 빠름
데이터 노출됨 → 보안에 취약
URL 길이 제한 있음
주로 조회용 (검색, 목록조회 등)
🟢 예시

✅ POST 방식
주소창에 데이터 안 보임 (본문 body에 전송)
보안이 GET보다 좋음
많은 양의 데이터 전송 가능
주로 데이터 등록, 수정, 로그인 등
🟢 예시

1. Client는 WebBrowser를 실행 후 주소 입력창에 URL를 입력하여 인터넷 상에 존재하는 WebServer(또는 WAS)에게 조회 요청을 보냄

2. WebServer(또는 WAS)는 요청 URL의 Mapping값을 판별하여 요청 처리를 할 수 있는 Servlet의 doGet메서드를 호출하여 요청 처리를 시작함

3. Service -> DAO 순으로 객체의 메소드를 호출하여 JDBC API를 활용한 ResultSet객체에서 조회 결과를 뽑아 DTO객체의 필드에 값을 옮겨담음

4. DTO객체를 Service -> Controller로 반환하여 Servlet은 응답에 필요한 데이터를 담은 객체를 request의 Attribute로 추가함

5. 응답 JSP를 RequestDispatcher객체를 이용하여 위임한 뒤 forward()를 호출하여 request, response를 전달

6. JSP파일에서는 EL구문 및 JSTL를 활용하여 Client에게 응답할 응답 HTML를 완성한 뒤 응답함


